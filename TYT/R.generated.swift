//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.image` struct is generated, and contains static references to 13 images.
  struct image {
    /// Image `LaunchImage`.
    static let launchImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "LaunchImage")
    /// Image `elrest`.
    static let elrest = Rswift.ImageResource(bundle: R.hostingBundle, name: "elrest")
    /// Image `emptystar`.
    static let emptystar = Rswift.ImageResource(bundle: R.hostingBundle, name: "emptystar")
    /// Image `filledstar`.
    static let filledstar = Rswift.ImageResource(bundle: R.hostingBundle, name: "filledstar")
    /// Image `food`.
    static let food = Rswift.ImageResource(bundle: R.hostingBundle, name: "food")
    /// Image `fran`.
    static let fran = Rswift.ImageResource(bundle: R.hostingBundle, name: "fran")
    /// Image `ital`.
    static let ital = Rswift.ImageResource(bundle: R.hostingBundle, name: "ital")
    /// Image `jap`.
    static let jap = Rswift.ImageResource(bundle: R.hostingBundle, name: "jap")
    /// Image `location`.
    static let location = Rswift.ImageResource(bundle: R.hostingBundle, name: "location")
    /// Image `maxim`.
    static let maxim = Rswift.ImageResource(bundle: R.hostingBundle, name: "maxim")
    /// Image `near`.
    static let near = Rswift.ImageResource(bundle: R.hostingBundle, name: "near")
    /// Image `palkin`.
    static let palkin = Rswift.ImageResource(bundle: R.hostingBundle, name: "palkin")
    /// Image `pin`.
    static let pin = Rswift.ImageResource(bundle: R.hostingBundle, name: "pin")
    
    /// `UIImage(named: "LaunchImage", bundle: ..., traitCollection: ...)`
    static func launchImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "elrest", bundle: ..., traitCollection: ...)`
    static func elrest(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.elrest, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "emptystar", bundle: ..., traitCollection: ...)`
    static func emptystar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.emptystar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "filledstar", bundle: ..., traitCollection: ...)`
    static func filledstar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filledstar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "food", bundle: ..., traitCollection: ...)`
    static func food(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.food, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "fran", bundle: ..., traitCollection: ...)`
    static func fran(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fran, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ital", bundle: ..., traitCollection: ...)`
    static func ital(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ital, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "jap", bundle: ..., traitCollection: ...)`
    static func jap(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.jap, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "location", bundle: ..., traitCollection: ...)`
    static func location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.location, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "maxim", bundle: ..., traitCollection: ...)`
    static func maxim(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.maxim, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "near", bundle: ..., traitCollection: ...)`
    static func near(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.near, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "palkin", bundle: ..., traitCollection: ...)`
    static func palkin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.palkin, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pin", bundle: ..., traitCollection: ...)`
    static func pin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pin, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `ImageMenuTVCell`.
    static let imageMenuTVCell = _R.nib._ImageMenuTVCell()
    /// Nib `RestDetailsMapView`.
    static let restDetailsMapView = _R.nib._RestDetailsMapView()
    
    /// `UINib(name: "ImageMenuTVCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.imageMenuTVCell) instead")
    static func imageMenuTVCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.imageMenuTVCell)
    }
    
    /// `UINib(name: "RestDetailsMapView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.restDetailsMapView) instead")
    static func restDetailsMapView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.restDetailsMapView)
    }
    
    static func imageMenuTVCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ImageMenuTVCell? {
      return R.nib.imageMenuTVCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ImageMenuTVCell
    }
    
    static func restDetailsMapView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RestDetailsMapView? {
      return R.nib.restDetailsMapView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RestDetailsMapView
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `mainMenuCell`.
    static let mainMenuCell: Rswift.ReuseIdentifier<ImageMenuTVCell> = Rswift.ReuseIdentifier(identifier: "mainMenuCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `ClosestRests`.
    static let closestRests = _R.storyboard.closestRests()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "ClosestRests", bundle: ...)`
    static func closestRests(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.closestRests)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.errors` struct is generated, and contains static references to 1 localization keys.
    struct errors {
      /// Value: Wrong storyboard
      static let storyboard = Rswift.StringResource(key: "storyboard", tableName: "Errors", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: Wrong storyboard
      static func storyboard(_: Void = ()) -> String {
        return NSLocalizedString("storyboard", tableName: "Errors", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 7 localization keys.
    struct localizable {
      /// Value: Ближайшие рестораны
      static let closestRests = Rswift.StringResource(key: "closestRests", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Вы недавно были в ресторане "Ель"
      static let recent = Rswift.StringResource(key: "recent", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Итальянская кухня
      static let italyFood = Rswift.StringResource(key: "italyFood", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Посмотреть меню
      static let seeMenu = Rswift.StringResource(key: "seeMenu", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Посмотреть на карте
      static let seeOnMap = Rswift.StringResource(key: "seeOnMap", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Французская кухня
      static let franceFood = Rswift.StringResource(key: "franceFood", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Японская кухня
      static let japanFood = Rswift.StringResource(key: "japanFood", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: Ближайшие рестораны
      static func closestRests(_: Void = ()) -> String {
        return NSLocalizedString("closestRests", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Вы недавно были в ресторане "Ель"
      static func recent(_: Void = ()) -> String {
        return NSLocalizedString("recent", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Итальянская кухня
      static func italyFood(_: Void = ()) -> String {
        return NSLocalizedString("italyFood", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Посмотреть меню
      static func seeMenu(_: Void = ()) -> String {
        return NSLocalizedString("seeMenu", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Посмотреть на карте
      static func seeOnMap(_: Void = ()) -> String {
        return NSLocalizedString("seeOnMap", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Французская кухня
      static func franceFood(_: Void = ()) -> String {
        return NSLocalizedString("franceFood", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Японская кухня
      static func japanFood(_: Void = ()) -> String {
        return NSLocalizedString("japanFood", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _RestDetailsMapView.validate()
    }
    
    struct _ImageMenuTVCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ImageMenuTVCell
      
      let bundle = R.hostingBundle
      let identifier = "mainMenuCell"
      let name = "ImageMenuTVCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ImageMenuTVCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ImageMenuTVCell
      }
      
      fileprivate init() {}
    }
    
    struct _RestDetailsMapView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "RestDetailsMapView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RestDetailsMapView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RestDetailsMapView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "elrest", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'elrest' is used in nib 'RestDetailsMapView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "emptystar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'emptystar' is used in nib 'RestDetailsMapView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "filledstar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'filledstar' is used in nib 'RestDetailsMapView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try closestRests.validate()
      try launchScreen.validate()
      try main.validate()
    }
    
    struct closestRests: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ClosestRestsVC
      
      let bundle = R.hostingBundle
      let name = "ClosestRests"
      
      static func validate() throws {
        if UIKit.UIImage(named: "location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'location' is used in storyboard 'ClosestRests', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
